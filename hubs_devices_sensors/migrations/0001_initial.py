# Generated by Django 2.1.5 on 2019-02-07 15:13

import datetime
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Device',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sensors_data_fetch_time', models.DurationField(default=datetime.timedelta(seconds=5), verbose_name='Sensors Data Fetch Time')),
                ('device_title', models.CharField(max_length=120, verbose_name='Device Title')),
                ('device_serial_number', models.CharField(max_length=16, unique=True, verbose_name='Device Serial Number')),
            ],
            options={
                'db_table': 'devices',
            },
        ),
        migrations.CreateModel(
            name='Hub',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('devices_data_fetch_time', models.DurationField(default=datetime.timedelta(seconds=300), verbose_name='Devices Data Fetch Time')),
                ('hub_data_update_time', models.DurationField(default=datetime.timedelta(seconds=600), verbose_name='Hub Data Update Time')),
                ('hub_title', models.CharField(max_length=120, verbose_name='Hub Title')),
                ('hub_serial_number', models.CharField(max_length=16, unique=True, verbose_name='Hub Serial Number')),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Hub Owner')),
            ],
            options={
                'db_table': 'hubs',
            },
        ),
        migrations.CreateModel(
            name='Sensor',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sensor_title', models.CharField(max_length=120, verbose_name='Sensor Title')),
                ('sensor_serial_number', models.CharField(max_length=16, unique=True, verbose_name='Sensor Serial Number')),
                ('sensor_data_type', models.CharField(choices=[('pH', 'pH'), ('CO2', 'CO2'), ('Temperature', 'Temperature')], max_length=30, verbose_name='Sensor Data Type')),
                ('sensor_device', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sensors', to='hubs_devices_sensors.Device', to_field='device_serial_number', verbose_name='Sensor Related Device')),
            ],
            options={
                'db_table': 'sensors',
            },
        ),
        migrations.CreateModel(
            name='SensorCollectedData',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_time_collected', models.DateTimeField(unique=True, verbose_name='Date & Time Collected')),
                ('sensor_data_value', models.FloatField(blank=True, default=0.1, verbose_name='Sensor Data Value')),
                ('sensor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sensor_collected_data', to='hubs_devices_sensors.Sensor', to_field='sensor_serial_number', verbose_name='Sensor')),
            ],
            options={
                'verbose_name': 'Sensor Collected Data',
                'verbose_name_plural': 'Sensor Collected Data',
                'db_table': 'sensor_collected_data',
            },
        ),
        migrations.AddField(
            model_name='device',
            name='device_hub',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='devices', to='hubs_devices_sensors.Hub', to_field='hub_serial_number', verbose_name='Device Related Hub'),
        ),
        migrations.AlterUniqueTogether(
            name='sensor',
            unique_together={('sensor_device', 'sensor_data_type')},
        ),
    ]
